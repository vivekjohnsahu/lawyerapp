import { Component, OnInit, ViewChild } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { Router, Navigation } from '@angular/router';
import { Camera, CameraOptions } from '@ionic-native/camera/ngx';
import { NavController,AlertController,ActionSheetController  } from '@ionic/angular';

@Component({
  selector: 'app-register',
  templateUrl: './register.page.html',
  styleUrls: ['./register.page.scss'],
})
export class RegisterPage implements OnInit {

  ImageBind:any = 'https://www.w3schools.com/howto/img_avatar.png';
  signupUser: FormGroup;
  userData = {
    mark_select:"",
    firstname:"",
    lastname:"",
    email:"",
    number:"",
    date:"",
    country:"",
    city:"",
    address:"",
    image:"",
    register:""
  };

  constructor(
    private router : Router, 
    private camera:Camera, 
    private actionSheetController:ActionSheetController,
    public alertController: AlertController
    ) 
  {
    //  validation pattern start
    let email_pattern = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
    this.signupUser = new FormGroup({
        mark_select: new FormControl('', [Validators.required]),    
        firstname: new FormControl('', [Validators.required]),       
        lastname: new FormControl(),      
        email: new FormControl('', [Validators.required, Validators.pattern(email_pattern)]),            
        number: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(14)]),
        date: new FormControl('', [Validators.required]),
        country: new FormControl('', [Validators.required]),
        city:new FormControl('', [Validators.required]),
        address:new FormControl('', [Validators.required]),
	});
	//  validation pattern end
  }

  ngOnInit() {
  }

   //  image popup start
  async SelectPhoto() {
    const actionSheet = await this.actionSheetController.create({
      buttons: [{
        text: 'Camera',
        icon: 'Camera',
        handler: () => {
          this.takePhoto(1);
        }
      }, {
        text: 'Gallery',
        icon: 'images',
        handler: () => {
          this.takePhoto(2);
        }
      }, {
        text: 'Cancel',
        icon: 'close',
        role: 'cancel',
        handler: () => {
        }
      }]
    });
    await actionSheet.present();
  }
  //  image popup end

  //  get image path start
  takePhoto(sourceType:number) {
    const options: CameraOptions = {
		quality: 50,
		destinationType: this.camera.DestinationType.DATA_URL,
		encodingType: this.camera.EncodingType.JPEG,
		mediaType: this.camera.MediaType.PICTURE,
		correctOrientation: true,
		sourceType: sourceType==1?this.camera.PictureSourceType.CAMERA:this.camera.PictureSourceType.PHOTOLIBRARY,     //this.camera.PictureSourceType.CAMERA,
    }
    this.camera.getPicture(options).then((imgData) => {
		this.ImageBind= "data:image/jpg;base64," + imgData;
    });
  }
  //  get image path end

  // radio button start
  checkValue(e){ 
    this.userData.mark_select=e.value
  }
  // radio button end

  //  signUp function start
  async signUp(){
    this.userData = {
        "mark_select": this.userData.mark_select,
        "firstname": this.userData.firstname,
        "lastname": this.userData.firstname,
        "email": this.userData.email,
        "number":this.userData.number,
        "date": this.userData.date,
        "country": this.userData.country,
        "city": this.userData.city,
        "address": this.userData.city,
        "image":this.ImageBind,
        "register":"firm"
	};
	const alert = await this.alertController.create({
		message: 'You have successfully registered and logged in.',
		buttons: [{
			text: 'Ok',
			handler: () => {
				this.router.navigateByUrl('/sign-in')
				console.log(this.userData)
				// this.signupUser.reset();
			}
		}]
	});
	await alert.present();
  }
  //  signUp function end

  // number Accept only start
	numberAccept(event): boolean {
		const charCode = (event.which) ? event.which : event.keyCode;
		if (charCode > 31 && (charCode < 48 || charCode > 57)) {
		  return false;
		}
		return true;
	}
	// number Accept only end
}

