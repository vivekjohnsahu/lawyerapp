import { Component, OnInit } from '@angular/core';
import { Camera, CameraOptions } from '@ionic-native/camera/ngx';
import { NavController,AlertController,ActionSheetController, ToastController } from '@ionic/angular';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { compileDirective } from '@angular/core/src/render3/jit/directive';
import { GlobalService } from '../../globalServices/global.service';
import { NgxSpinnerService } from 'ngx-spinner';
import { Router, Navigation } from '@angular/router';

@Component({
  selector: 'app-manage-lawyer',
  templateUrl: './manage-lawyer.page.html',
  styleUrls: ['./manage-lawyer.page.scss'],
})

export class ManageLawyerPage implements OnInit {
 
	step_contant_1:boolean=true;
	step_contant_2:boolean;
	step_contant_3:boolean;
	fill_step_:number=0;
	ImageBind:any = 'https://www.w3schools.com/howto/img_avatar.png';
	ImageData: string;
	skills:any;
	skill_add=[];  
	public searchText : string;
	manageLawyer: FormGroup;
	LawyerData = {
		firstname:"",
		lastname:"",
		email:"",
		number:"",
		date:"",
	};

	LawyerAddress: FormGroup;
	LawyerLocation = {
		address:"",
		city:"",
	};
	_status: any;
	Message: any;
	pass_skill=[];
	selected_city: any;

	constructor(
		public navCtrl: NavController,
		private camera:Camera, 
		private actionSheetController:ActionSheetController,
		public alertController:AlertController,
		public gobalService:GlobalService,
		private spinner: NgxSpinnerService,
		private router : Router,
		public toastController:ToastController, 
	) {

    //  validation pattern start
		let email_pattern = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
		this.manageLawyer = new FormGroup({
			firstname: new FormControl('', [Validators.required]),
			lastname: new FormControl(),       
			email: new FormControl('', [Validators.required, Validators.pattern(email_pattern)]),            
			number: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(14)]),
			date: new FormControl('', [Validators.required]),
		});

		this.LawyerAddress = new FormGroup({
			address: new FormControl('', [Validators.required]),   
			city: new FormControl('', [Validators.required]),           
		});

		let firm_id = JSON.parse(localStorage.getItem('details_user'));
		let key ={
			"apikey":this.gobalService.APIKey,
			"user_id":firm_id[0].id
		}
		this.gobalService.subscribe_chek(key)
		.then(async data => {
			if(data!=''){
				const alert = await this.alertController.create({
					message: "Plan not successcribed Please kindly successcribed you plan.",
					buttons: [{
						text: 'ok',
						handler: () => {
							this.router.navigateByUrl('/plan')
						}
					}]
				});
				await alert.present();
			}else{
				alert()
			}
		})

  	}

	ngOnInit() {
		var lawyer_all_data = JSON.parse(localStorage.getItem('lawyer_all_data'));
        if(lawyer_all_data!='' && lawyer_all_data!=undefined && lawyer_all_data!=null){
			this.LawyerData = {
				firstname:lawyer_all_data.first_name,
				lastname:lawyer_all_data.last_name,
				email:lawyer_all_data.email,
				number:lawyer_all_data.contact_number1,
				date:lawyer_all_data.dob,
			};
			this.LawyerLocation = {
				address:lawyer_all_data.address_line1,
				city:lawyer_all_data.address_line2,
			};
			this.ImageBind=lawyer_all_data.profile_image
			this.skill_add=[lawyer_all_data.lawyer_skill]
			this.pass_skill=[lawyer_all_data.lawyer_skill]
			this.selected_city = lawyer_all_data.address_line2
		}else{
			this.selected_city = ''
			this.LawyerData = {
				firstname:"",
				lastname:"",
				email:"",
				number:"",
				date:"",
			};
			this.LawyerLocation = {
				address:"",
				city:"",
			};
			this.ImageBind = 'https://www.w3schools.com/howto/img_avatar.png';
			this.pass_skill=[lawyer_all_data.lawyer_skill]
			this.skill_add=[]
		}
	}

	// template html code start
	async step_1(){
		if(this.step_contant_1!=true){
			const alert = await this.alertController.create({
				message: 'Conform back to first step',
				buttons: [{
					text: 'Cancel',
					role: 'cancel',
					cssClass: 'secondary',
					},
					{
					text: 'ok',
					handler: () => {
						this.step_contant_1=true;
						this.step_contant_2=false;
						this.step_contant_3=false;
						this.fill_step_=0;
					}
				}]
			});
			await alert.present();
		}
	}
		
	async step_2(){
		if(this.step_contant_2!=true){
			if(this.fill_step_==0){
				const alert = await this.alertController.create({
					message: 'Fill the frist step and move next step',
					buttons: ['OK']
				});
				await alert.present();
			}else if(this.fill_step_==1 || this.fill_step_==2){
				const alert = await this.alertController.create({
					message: 'Conform back to second step',
					buttons: [{
						text: 'Cancel',
						role: 'cancel',
						cssClass: 'secondary',
						},
						{
						text: 'ok',
						handler: () => {
							this.step_contant_2=true;
							this.step_contant_1=false;
							this.step_contant_3=false;
							this.fill_step_=1;
						}
					}]
				});
				await alert.present();
			}
		}
	}
	
	async step_3(){
		if(this.step_contant_3!=true){
			if(this.fill_step_==2){
				const alert = await this.alertController.create({
					message: 'Fill the frist step and move next step',
					buttons: ['OK']
				});
				await alert.present();
			}else if(this.fill_step_==1){
				const alert = await this.alertController.create({
					message: 'Fill the second step and move next step',
					buttons: ['OK']
				});
				await alert.present();
			}else if(this.fill_step_==0){
				const alert = await this.alertController.create({
					message: 'Fill the frist and second step and move third step',
					buttons: ['OK']
				});
				await alert.present();
			}
		}
	}
	// template html code end

	// form validation start
	Lawyer_stap_1(){
		this.step_contant_2=true;
		this.step_contant_1=false;
		this.step_contant_3=false;
		this.fill_step_=1;
	}

	async Lawyer_stap_2(){
		if(this.skill_add.length == 0){
			const alert = await this.alertController.create({
				message: 'Add your skill',
				buttons: ['OK']
			});
			await alert.present();
		}else{
			this.step_contant_3=true;
			this.step_contant_1=false;
			this.step_contant_2=false;
			this.fill_step_=2;
		}
	}

	Lawyer_stap_3(){
		this.spinner.show();
		var lawyer_all_data = JSON.parse(localStorage.getItem('lawyer_all_data'));
        if(lawyer_all_data!='' && lawyer_all_data!=undefined && lawyer_all_data!=null){
			let lawyer_info = {
				first_name:this.LawyerData.firstname,
				last_name:this.LawyerData.lastname,
				email:this.LawyerData.email,
				contact_number:this.LawyerData.number,
				date:this.LawyerData.date,
				id:lawyer_all_data.id,
				lawyer_image:this.ImageBind,
				apikey:this.gobalService.APIKey,
				skill:this.pass_skill,
				address:this.LawyerLocation.address,
				city:this.LawyerLocation.city
			}
			this.gobalService.edit_lawyers(lawyer_info)
			.then(async data => {
				this._status = data['ErrorCode']
				this.Message = data['message'];
				this.spinner.hide();
				if(this._status=='0'){
					const alert = await this.alertController.create({
						message: this.Message,
						buttons: [{
						text: 'Ok',
							handler: () => {
								localStorage.removeItem('lawyer_all_data')
								this.router.navigateByUrl('/home')
								this.manageLawyer.reset();
								this.LawyerAddress.reset();
							}
						}]
					});
					await alert.present();
				}else if(this._status=='1'){
					const alert = await this.alertController.create({
						message: this.Message,
						buttons: [{
						text: 'Ok',
							handler: () => {
								this.step_contant_1=true;
								this.step_contant_2=false;
								this.step_contant_3=false;
								this.fill_step_=0;
							}
						}]
					});
					await alert.present();
				}else{
					const toast = await this.toastController.create({
						message: this.Message,
						position:'bottom',
						color:"dark",
						duration: 3000
					});
					toast.present();
				}
			})
		}else{
			let user = JSON.parse(localStorage.getItem('details_user'));
			let lawyer_info = {
				firstname:this.LawyerData.firstname,
				lastname:this.LawyerData.lastname,
				email:this.LawyerData.email,
				number:this.LawyerData.number,
				date:this.LawyerData.date,
				lawfirm_id:user[0].id,
				lawyer_image:this.ImageBind,
				apikey:this.gobalService.APIKey,
				skill:this.pass_skill,
				address:this.LawyerLocation.address,
				city:this.LawyerLocation.city
			}
			this.gobalService.lawyer_add(lawyer_info)
			.then(async data => {
				this._status = data['ErrorCode']
				this.Message = data['message'];
				this.spinner.hide();
				if(this._status=='0'){
					const alert = await this.alertController.create({
						message: this.Message,
						buttons: [{
						text: 'Ok',
							handler: () => {
								this.router.navigateByUrl('/home')
								this.manageLawyer.reset();
								this.LawyerAddress.reset();
							}
						}]
					});
					await alert.present();
				}else if(this._status=='1'){
					const alert = await this.alertController.create({
						message: this.Message,
						buttons: [{
						text: 'Ok',
							handler: () => {
								this.step_contant_1=true;
								this.step_contant_2=false;
								this.step_contant_3=false;
								this.fill_step_=0;
							}
						}]
					});
					await alert.present();
				}else{
					const toast = await this.toastController.create({
						message: this.Message,
						position:'bottom',
						color:"dark",
						duration: 3000
					});
					toast.present();
				}
			})
		}	
	}
 
  // image popup start
	async SelectPhoto() {
		const actionSheet = await this.actionSheetController.create({
		buttons: [{
			text: 'Camera',
			icon: 'Camera',
			handler: () => {
				let sourceType =1;
				this.takePhoto(1);
			}
		}, {
			text: 'Gallery',
			icon: 'images',
			handler: () => {
				let sourceType =2;
				this.takePhoto(2);
			}
		}, {
			text: 'Cancel',
			icon: 'close',
			role: 'cancel',
			handler: () => {
			}
		}]
		});
		await actionSheet.present();
	}

	// //  get image path start
	takePhoto(sourceType:number) {
		const options: CameraOptions = {
			quality: 50,
			destinationType: this.camera.DestinationType.DATA_URL,
			encodingType: this.camera.EncodingType.JPEG,
			mediaType: this.camera.MediaType.PICTURE,
			correctOrientation: true,
			sourceType: sourceType==1?this.camera.PictureSourceType.CAMERA:this.camera.PictureSourceType.PHOTOLIBRARY,     //this.camera.PictureSourceType.CAMERA,
		}
		this.camera.getPicture(options).then((imgData) => {
			this.ImageData = "data:image/jpg;base64," + imgData;
			this.ImageBind =  this.ImageData
		});
	}
	
	// search and add skills start
	getISkill(e){
		let key = {
			apikey:this.gobalService.APIKey
		}
		this.gobalService.search_skill(key)
		.then(data => {
			this.skills = data;
			this.skills=this.skills.data
		})
	}

	add_lawyer_skills(vl,i,id){
		// console.log(this.skills.data[i])
		// this.skills = this.skills.data.slice(i,1)
		this.skill_add.push(vl)
		this.pass_skill.push(id)
	}

	remove_skill(index){
		this.skill_add.splice(index,1)
		this.pass_skill.splice(index,1)
	}

	remove_all_skill(){
		this.skill_add = []
		this.pass_skill = []
	}

	// number Accept only start
	numberAccept(event): boolean {
		const charCode = (event.which) ? event.which : event.keyCode;
		if (charCode > 31 && (charCode < 48 || charCode > 57)) {
		  return false;
		}
		return true;
	}

	user_click(){
		var lawyer_all_data = JSON.parse(localStorage.getItem('lawyer_all_data'));
		if(lawyer_all_data!='' && lawyer_all_data!=undefined && lawyer_all_data!=null){
			localStorage.removeItem('lawyer_all_data')
		}
	}
}

